package threadEx;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;

public class ServerThread extends Thread {

	
	Socket socket;
	List<Socket> list;
	
	public ServerThread(Socket socket, List<Socket> list) {
		this.socket = socket;
		this.list = list;
	}

	@Override
	public void run() {
		super.run();
		try {
		//thread로해야됨
			while(true) {
				//수신(revc)
				BufferedReader reader;
			
				reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			
				//넘어온 문자
				String str = reader.readLine();
				System.out.println("clinet로부터 받은 메시지 : " + str);

				
				//송신(send)
				//동일한 녀석 아닌것 로직
				for (int i = 0; i < list.size(); i++) {
					Socket listSocket =	list.get(i);
					if (socket.getPort() != listSocket.getPort()) {
						//server응답 메시지
//						str = "반값습니다.";
						PrintWriter writer = new PrintWriter(listSocket.getOutputStream()); // 동일한 애한테보내고 있으니까 변경
						//클라이언트도 받을 준비해야됨
						writer.println(str);
						writer.flush();// 꼭 flush로 데이터 짜내줘야됨
						Thread.sleep(300);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("클라이언트 연결이 종료 되었습니다..." + socket.getInetAddress());
			list.remove(socket);
			
			//접속되어 있는 남아있는 클라이언트 출력해보기
			for (Socket s : list) {
				System.out.println("접속되어 있는 IP : " + s.getInetAddress() + "PORT : " + s.getPort());
			}
			
			try {
				socket.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}
	
	
	
}
