/*
	view : 가상 테이블 
			실체가 없는 테이블 != dual -> 애는 값만 확인하기 위한거.
            다른 테이블에 접근하기 위한 테이블
	
    table < ------- view <--------- user
    속도가 빠르다 
    한개의 view로 여러개의 테이블을 검색 할 수 있다.
    제한 설정이 가능하다. -- readonly
*/

create or replace view ub_test01
as
select job_id, job_title, min_salary
from jobs;
/*
 int array[] = {1, 2, 3};
 int alias[] = array;
 alias[0] --> 1
 alias[0] = 11;
 alias[0] --> 11
 이것처럼 view에 데이터 넣으면 원본 테이블에 들어가는거임
 */
 
 insert into ub_test01(job_id, job_title, min_salary)
 values('DEVELOPER', '개발자', 10000);
 
 select * from jobs;
 rollback;
 
 delete from jobs 
 where job_id = 'DEVELOPER';


create table emp 
as
select employee_id, first_name, salary
from employees;
create or replace view ub_view(empno, ename, sal)
as
select employee_id, first_name, salary
from emp;


select * from ub_view;
insert into ub_view(empno, ename, sla)
values(300, '정수동', 10000);

select * from ub_view;
select * from emp;

create or replace view dept_emp_location_view
as
select employee_id, first_name, e.department_id, d.department_name, l.city
from employees e, departments d, locations l 
where e.department_id = d.department_id and
d.location_id = l.location_id;
SELECT * FROM mydb.dept_emp_location_view
where employee_id = 103;

create or replace 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `mydb`.`ub_view` (`empno` , `ename` , `sal`) AS
    SELECT 
        `mydb`.`emp`.`employee_id` AS `employee_id`,
        `mydb`.`emp`.`first_name` AS `first_name`,
        `mydb`.`emp`.`salary` AS `salary`
    FROM
        `mydb`.`emp`;
        
        drop view ub_view;