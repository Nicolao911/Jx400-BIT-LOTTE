2022.06.16.(목) 
mySQL 수업 내용
select @@autocommit;  -- 1: 설정 0: 해제 되어있다는것

set autocommit = true; -- 설정
set autocommit = false; -- 해제

commit;
autocommit 풀고나면 그 설정을 푸는거부터 commit해야된다.

/*
	자료형
    JAVA					Oracle 					mySQL
    int						INTEGER,NUMBER(자리수)	INT, DECIMAL(5) , DECIMAL(5,2) --> 소수점 둘째자리 까지 보겠다
    double					NUMBER					DOUBLE
    String 					VARCHAR2				VARCHAR
    Date					Date					Date
    
    */
    
-- table 생성


/*
테이블
Row(행) Column(열)으로 구성되어있다 
레코드나 로우는 같은개념
create table  테이블명(
	컬럼명 자료형,
    컬럼명 자료형
    ;
)

-- Table 정보조회 (스키마가 mydb)
select * 
from INFOMATEION_SCHEMA.TABLES
where table_SCHEMA = 'mydb'

*/

select * 
from INFORMATION_SCHEMA.TABLES
where table_SCHEMA = 'mydb';



-- varchar

create table tb_varchar(
	coll varchar(10),
    col2 varchar(20),
    col3 varchar(30)
);

insert into tb_varchar(coll, col2, col3) values('avb', 'avb','avb');  -- 영문자 1byte
insert into tb_varchar(coll, col2, col3) values('가나다', '가나다','가나다'); -- 한글 3byte


-- 숫자(정수, 실수)
-- INTEGER

create table tb_integer (
	col1 int,
    col2 integer
);
insert into tb_integer (col1, col2) values(123,456);

insert into tb_integer (col1, col2) values('123','456'); -- 디비에선 문자로 넣어도 들어간다

create table tb_decimal(

	col1 decimal,
    col2 decimal(5), -- 숫자를 5자리 까지 취급하겠다,
    col3 decimal(5, 2) -- 총 5자리 숫자를 취급하는데 소수점 2째자리까지 취급하겠다

);

insert into tb_decimal (col1, col2, col3) values(1234.5678 , 12345.12, 123.456); -- 경고표시가 뜨지만 데이터가 들어갈때도 있고 아닐떄도 있으니 주의



-- date
create table tb_date(
	col1 date,
    col2 date
);

-- 현재 날짜 구하는방법
-- insert into tb_date(col1,col2) values(NOW(), date_sub(now() -1, interval day)); -- sysdate

select * from tb_date;

select date_format(col1, ' %y %n 5d '), date_format(col1, '%m') from tb_date;


-- tempstamp  자료형은 대문자로~쓰자~ 권장~
CREATE TABLE BOARD(
	NUM INT NOT NULL AUTO_INCREMENT,
    TITLE VARCHAR(30),
    YMD TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY(NUM)
);

insert into board values(1, '타이거즈', default);
insert into board values(2, '라이온즈', now());
insert into board values(3, '트윈즈', now());
insert into board values(4, '자이언츠', str_to_date('20221012143205', '%Y%m%d%H%i%s')); -- 외부에서 들어온 데이터로 그시간날짜 넣어주기

select * from BOARD;

select num, title, date_format(ymd, '%y/%m/%d') 
from board;

select  date_format(ymd, '%Y %m %d %h %i %s') -- %y로 하면 년도 끝자리 22년 이렇게 %Y로 하면 2022 4자리 다나온다

-- extact  원하는 부분만 산출하는 경우 사용하는 함수 시간만 꺼낼때 날짜만 꺼낼떄 등등

from board;



select now(); 

/*
	CRUD
    
	INSERT
	DELETE
    SELECT ----> 90%
    UPDATE 

	object
    CREATE
    DROP
    ALTER
    



	SELECT (값, 컬럼명, 함수, SUB QUERY)
    FROM (테이블명, SUB QUERY)
    
    SELECT * FROM employees;
*/

SELECT * FROM employees;

select employee_id, last_name, first_name
from employees;

-- desc
desc employees;

-- 임의의 컬럼 --오라클에서 dual테이블 역할 저렇게 써주면 쿼리에 다 넣을수 있다.. 반복 쿼리 클랜징 만들떄 쓰면될듯
select '이름: ' , 20 , first_name 
from employees;


-- alias -- 별명
select first_name as '이름', last_name as '성'
from employees;

select first_name  "이름" , last_name "성" -- as 생략가능 별칭은 ""로 큰타옴표로 하자/ insert value 는 ''작은 따옴표료 둘다 들어가긴하는데 보는사람 명시적으로
from employees;


select first_name, last_name, salary * 12 as 연봉
from employees;
-- 연결 connaction catch --> 오라클은 || '성'||'이름'
select concat('이름: ', last_name, first_name) as '전체이름'
from employees;

-- 조건절
/*
	WHERE
	대소비교, 판정
    =, !=, > , < , >=, <=, <> --다르다 이게 != 인사연동에서 쓴거
    IS NULL, IS NOT NULL != NULL <-- 이거 사용못함 표현이 잘못됨. is not null 이렇게 is로 써야됨
    
    && -> and
    || -> or 로 쓴다


*/

select first_name, salary
from employees
where first_name = 'John';

select first_name, salary
from employees
where first_name <> 'John';

select * 
from employees
where salary >= 9000;


select * 
from employees
where first_name >= 'John';

select hire_date, first_name
from employees
-- where hire_date < '1991-01-01'; -- 이것도 됨 보통 이거 썻었지.
where hire_date < date('1991-01-01'); -- 정석

select *
from employees
where manager_id is null;

select first_name , last_name, salary
from employees
where manager_id is not null
	AND not salary >= 10000;

select first_name , last_name, salary
from employees
where (first_name = 'John' or first_name = 'Den')
and salary > 6000;

/*

	ALL, ANY, IN, EXISTS, BETWEEN
    and	or	  or           >= <=

*/
select first_name , last_name, salary
from employees
where salary = ALL(select salary
				  from employees 
                  where salary = 8000); -- all이랑 하단의 값이랑 같음 거의 안씀 
                  
select first_name , last_name, salary
from employees
where salary = 8000;


select first_name , last_name, salary
from employees
where salary  IN(6000, 8000, 10000);

select first_name , last_name, salary
from employees
where salary = ALL(select salary
				  from employees 
                  where job_id = 'IT_PROG'); -- all은 and조건이라 all로 뽐으면 값이 안나온다 이래서 all을 안쓴다. 월급이 5천불이면서 8천불이면서 이런사람없으니까 그래서 이떄 any로 한다 or조건
                  
                  select first_name , last_name, salary
from employees
where salary = ANY(select salary
				  from employees 
                  where job_id = 'IT_PROG');
                  
-- exists  dual 은 가상테이블로 값만 찍어볼떄 console같이
select first_name,  job_id from employees a
where exists (select 1 from dual
				where a.job_id = 'IT_PROG');
                
			
-- between --> >= and <=

select first_name, salary 
from employees
where salary > 3200 and salary <= 9000;


select first_name, salary 
from employees
where salary  between 3200 and 9000;

select first_name, salary 
from employees
where salary  not between 3200 and 9000;
-- salary < 3200 or salary > 9000 과 같음

-- like
select * 
from employees
where first_name like 'G_ra_d'; -- _ 한문자 _ 부분은 어떤게 와도 된다 결과갑에서 저부분에 어떤글자가와도 조합해서 조회한다

select *
from employees
where first_name like 'K%y'; -- 이건 많이 씀 아 like %검색% 이거

select * 
from employees
where
first_name
like '%a%';  

/*
 order by == sorting 올림 / 내림차순
*/

select * 
from employees
order by salary asc;

select * 
from employees
order by salary desc;

select * 
from employees
order by hire_date ;

select employee_id, first_name, manager_id
from employees
order by manager_id is null desc; -- null값이 먼저나오게

select employee_id, commission_pct
from employees
order by commission_pct is null; -- 없는애들 뒤로 밀어버리기 위해서 정렬하면됨

select first_name,commission_pct,salary
from employees
order by commission_pct is null desc, salary desc; -- 두가지 순차적으로 각 항목별로 정렬가능

-- select first_name, salary *12 as 연봉
-- from employees
-- order by '연봉' dsec;


-- 그룹으로 묶는 기능
select distinct department_id
from employees
order by department_id asc; -- group by로 묶은거랑 같은값 나옴


-- group by
select department_id
from employees
group by department_id
order by department_id asc;

/*
	그룹 함수
	COUNT
    SUM
    AVG
    MAX
    MIN
*/
select count(employee_id), count(*), sum(salary), avg(salary),
max(salary), min(salary)
from employees
where job_id = 'IT_PROG';
/*
	ifnull(대상이 되는 컬럼, 출력하고 싶은 값) --NVL
    
    대상이 되는 컬러밍 null 일 경우, 출력하고 싶은 값을 리턴하낟
    
    
    

*/
select first_name, ifnull(commission_pct, 0)
from  employees; 

-- truncate 
select department_id, sum(salary), max(salary),truncate(avg(salary), 0)
from employees
group by department_id;


select department_id, job_id 
from employees 
group by department_id, job_id; -- 묶은거로 묶음 잘 쓰진 않음

-- group by -> 조건  
-- having
select job_id, sum(salary)
from  employees
group by job_id
having sum(salary) >= 100000;

-- 급여를 5000이상 받는 사원으로 합계를 내서 업무(job)로 그룹화 하여 급여의 합계 가 20000을  초과하는 업무명과 사원수, 합계 , 평균


select job_id , count(*), sum(salary), avg(salary)
from employees
where salary >= 5000
group by job_id
having sum(salary) > 20000;

select department_id, count(*)
from  employees
group by department_id
having count(*) > 30;
